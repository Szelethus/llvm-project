//=- ClangSACheckersEmitter.cpp - Generate Clang SA checkers tables -*- C++ -*-
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This tablegen backend emits Clang Static Analyzer -analyzer-config tables.
//
//===----------------------------------------------------------------------===//

#include "TableGenBackends.h"
#include "llvm/ADT/StringMap.h"
#include "llvm/TableGen/Error.h"
#include "llvm/TableGen/Record.h"
#include "llvm/TableGen/TableGenBackend.h"
#include <map>
#include <string>

using namespace llvm;

void clang::EmitClangSAConfigs(RecordKeeper &Records, raw_ostream &OS) {
  std::vector<Record *> packages =
      Records.getAllDerivedDefinitions("BooleanConfig");
  using SortedRecords = llvm::StringMap<const Record *>;

  OS << "// This file is automatically generated. Do not edit this file by "
        "hand.\n";

  // Emit packages.
  //
  // PACKAGE(PACKAGENAME)
  //   - PACKAGENAME: The name of the package.
  OS << "\n"
        "#ifdef GET_PACKAGES\n";
  {
    SortedRecords sortedPackages;
    for (const Record *Package : packages)
      sortedPackages[Package->getValueAsString("Name")] = Package;

    for (const auto &Pair : sortedPackages) {
      const Record *Package = Pair.second;
      OS << "PACKAGE("
         << "bool," << Package->getName() << ","
         << "\"";
      OS.write_escaped(Package->getValueAsString("Name")) << "\",\"";
      OS.write_escaped(Package->getValueAsString("HelpText"))
          << "\"," << Package->getValueAsString("DefaultVal");

      OS << ")\n";
    }
  }
  OS << "#endif // GET_PACKAGES\n"
        "\n";
}
