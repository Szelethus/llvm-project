//=- ClangSACheckersEmitter.cpp - Generate Clang SA checkers tables -*- C++ -*-
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This tablegen backend emits Clang Static Analyzer -analyzer-config tables.
//
//===----------------------------------------------------------------------===//

#include "TableGenBackends.h"
#include "llvm/ADT/StringMap.h"
#include "llvm/TableGen/Error.h"
#include "llvm/TableGen/Record.h"
#include "llvm/TableGen/TableGenBackend.h"
#include <map>
#include <string>

using namespace llvm;

void clang::EmitClangSAConfigs(RecordKeeper &Records, raw_ostream &OS) {
  using SortedRecords = llvm::StringMap<const Record *>;

  OS << "// This file is automatically generated. Do not edit this file by "
        "hand.\n";

  // Emit boolean options.
  //
  // BOOLEAN_OPTION(TYPE, FIELD_NAME, CMDFLAG, HELPTEXT, DEFAULTVAL)
  OS << "\n"
        "#ifdef BOOLEAN_OPTIONS\n";
  {
    std::vector<Record *> BooleanOptions =
        Records.getAllDerivedDefinitions("BooleanConfig");
    SortedRecords SortedBooleanOptions;
    for (const Record *Package : BooleanOptions)
      SortedBooleanOptions[Package->getValueAsString("Name")] = Package;

    for (const auto &Pair : SortedBooleanOptions) {
      const Record *Package = Pair.second;
      OS << "BOOLEAN_OPTION("
         << "bool," << Package->getName() << ","
         << "\"";
      OS.write_escaped(Package->getValueAsString("Name")) << "\",\"";
      OS.write_escaped(Package->getValueAsString("HelpText"))
          << "\"," << Package->getValueAsString("DefaultVal");
      OS << ")\n";
    }
  }
  OS << "#endif // BOOLEAN_OPTIONS\n"
        "\n";

  // Emit boolean options.
  //
  // BOOLEAN_OPTION(TYPE, FIELD_NAME, CMDFLAG, HELPTEXT, DEFAULTVAL)
  OS << "\n"
        "#ifdef INTEGER_OPTIONS\n";
  {
    std::vector<Record *> IntegerOptions =
        Records.getAllDerivedDefinitions("IntegerConfig");
    SortedRecords SortedIntegerOptions;
    for (const Record *Package : IntegerOptions)
      SortedIntegerOptions[Package->getValueAsString("Name")] = Package;

    for (const auto &Pair : SortedIntegerOptions) {
      const Record *Package = Pair.second;
      OS << "INTEGER_OPTION("
         << "bool," << Package->getName() << ","
         << "\"";
      OS.write_escaped(Package->getValueAsString("Name")) << "\",\"";
      OS.write_escaped(Package->getValueAsString("HelpText"))
          << "\"," << Package->getValueAsString("DefaultVal");
      OS << ")\n";
    }
  }
  OS << "#endif // INTEGER_OPTIONS\n"
        "\n";

  // Emit boolean options.
  //
  // BOOLEAN_OPTION(TYPE, FIELD_NAME, CMDFLAG, HELPTEXT, DEFAULTVAL)
  OS << "\n"
        "#ifdef STRING_OPTIONS\n";
  {
    std::vector<Record *> StringOptions =
        Records.getAllDerivedDefinitions("StringConfig");
    SortedRecords SortedIntegerOptions;
    for (const Record *Package : StringOptions)
      SortedIntegerOptions[Package->getValueAsString("Name")] = Package;

    for (const auto &Pair : SortedIntegerOptions) {
      const Record *Package = Pair.second;
      OS << "STRING_OPTION("
         << "bool," << Package->getName() << ","
         << "\"";
      OS.write_escaped(Package->getValueAsString("Name")) << "\",\"";
      OS.write_escaped(Package->getValueAsString("HelpText")) << "\",\"";
      OS.write_escaped(Package->getValueAsString("DefaultVal"));
      OS << ")\n";
    }
  }
  OS << "#endif // STRING_OPTIONS\n"
        "\n";

  // Emit boolean options.
  //
  // BOOLEAN_OPTION(TYPE, FIELD_NAME, CMDFLAG, HELPTEXT, DEFAULTVAL)
  OS << "\n"
        "#ifdef STRING_OPTIONS\n";
  {
    std::vector<Record *> StringOptions =
        Records.getAllDerivedDefinitions("EnumConfig");
    SortedRecords SortedIntegerOptions;
    for (const Record *Package : StringOptions)
      SortedIntegerOptions[Package->getValueAsString("Name")] = Package;

    for (const auto &Pair : SortedIntegerOptions) {
      const Record *Package = Pair.second;
      OS << "STRING_OPTION("
         << "bool," << Package->getName() << ","
         << "\"";
      OS.write_escaped(Package->getValueAsString("Name")) << "\",\"";
      OS.write_escaped(Package->getValueAsString("HelpText")) << "\",\"";
      OS.write_escaped(Package->getValueAsString("DefaultVal")) << "\",";
      if (!Package->isValueUnset("Values")) {
        for (const Record *EnumVal : Package->getValueAsListOfDefs("Values")) {
          OS << "\"";
          OS.write_escaped(EnumVal->getValueAsString("CmdFlag"));
          OS << ",\"";
        }
        OS << ',';
        for (const Record *EnumVal : Package->getValueAsListOfDefs("Values")) {
          OS << "\"";
          OS.write_escaped(EnumVal->getValueAsString("EnumName"));
          OS << ",\"";
        }
      }
      OS << "\")\n";
    }
  }
  OS << "#endif // STRING_OPTIONS\n"
        "\n";
}
